plugins {
    id 'java-library'
    id 'maven-publish'
}

group = 'com.github.figaf'
version = '2.1-IRT-4812-SNAPSHOT'

ext {
    enableSnapshotsForDependencyResolutionAndPublishing = project.findProperty('enableSnapshots') ?: 'false'
    snapshotsRepoUrl = project.findProperty('snapshotsRepoUrl') ?: ''
    snapshotsRepoUsername = project.findProperty('snapshotsRepoUsername') ?: ''
    snapshotsRepoPassword = project.findProperty('snapshotsRepoPassword') ?: ''

    lombokVersion = '1.18.34'
    integrationCommonsVersion = '2.3'
    integrationCommonsTestVersion = '2.1'
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    if (enableSnapshotsForDependencyResolutionAndPublishing == 'true') {
        maven {
            url "$snapshotsRepoUrl/content/groups/public/"
            allowInsecureProtocol true
            credentials {
                username "$snapshotsRepoUsername"
                password "$snapshotsRepoPassword"
            }
        }
    }
    mavenLocal()
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    api "com.github.figaf:integration-commons:${integrationCommonsVersion}"

    testImplementation "com.github.figaf:integration-commons-test:${integrationCommonsTestVersion}"
}

java {
    withSourcesJar()
}

test {
    useJUnitPlatform()

    project.properties.each {propertyName, propertyValue ->
        if (!propertyName.startsWith("agent-test-data")) return

        systemProperty propertyName, propertyValue
    }

    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed"
    }

    maxHeapSize = "2G"
}

configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            def snapshotsRepoUrl = "$snapshotsRepoUrl/content/repositories/snapshots"
            url snapshotsRepoUrl
            allowInsecureProtocol true
            credentials {
                username snapshotsRepoUsername
                password snapshotsRepoPassword
            }
        }
    }
}

tasks.withType(PublishToMavenRepository).configureEach {
    doFirst {
        if (enableSnapshotsForDependencyResolutionAndPublishing != 'true') {
            throw new GradleException("It's not possible to perform publishing because property 'enableSnapshots' " +
                    "is not configured or set to 'false'")
        }
        // Prevent release publishing
        if (!version.endsWith("-SNAPSHOT")) {
            throw new GradleException("Release publishing is not allowed, it's done by JitPack")
        }
    }
}